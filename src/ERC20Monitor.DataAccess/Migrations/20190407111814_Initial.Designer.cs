// <auto-generated />
using System;
using DLTech.ERC20Monitor.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DLTech.ERC20Monitor.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190407111814_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.Block", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("BlockTime")
                        .HasColumnName("block_time");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<long>("Height")
                        .HasColumnName("height");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnName("last_updated_at");

                    b.Property<byte[]>("Miner")
                        .IsRequired()
                        .HasColumnName("miner")
                        .HasMaxLength(20);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_blocks");

                    b.HasIndex("Status", "Height")
                        .HasName("ix_blocks_status_height");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.Confirmation", b =>
                {
                    b.Property<byte[]>("TransactionId")
                        .HasColumnName("transaction_id")
                        .HasMaxLength(32);

                    b.Property<byte[]>("BlockId")
                        .HasColumnName("block_id")
                        .HasMaxLength(32);

                    b.HasKey("TransactionId", "BlockId")
                        .HasName("pk_confirmations");

                    b.HasIndex("BlockId")
                        .HasName("ix_confirmations_block_id");

                    b.ToTable("confirmations");
                });

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.ScopeLock", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasMaxLength(16);

                    b.Property<DateTimeOffset>("LastLockedAt")
                        .HasColumnName("last_locked_at");

                    b.HasKey("Id")
                        .HasName("pk_scope_locks");

                    b.ToTable("scope_locks");

                    b.HasData(
                        new
                        {
                            Id = "blocks",
                            LastLockedAt = new DateTimeOffset(new DateTime(2019, 4, 7, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.Transaction", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasMaxLength(32);

                    b.Property<byte[]>("From")
                        .IsRequired()
                        .HasColumnName("from")
                        .HasMaxLength(20);

                    b.Property<byte[]>("To")
                        .IsRequired()
                        .HasColumnName("to")
                        .HasMaxLength(20);

                    b.Property<decimal>("Value")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("From")
                        .HasName("ix_transactions_from");

                    b.HasIndex("To")
                        .HasName("ix_transactions_to");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.Transfer", b =>
                {
                    b.Property<byte[]>("TransactionId")
                        .HasColumnName("transaction_id")
                        .HasMaxLength(32);

                    b.Property<int>("Position")
                        .HasColumnName("position");

                    b.Property<decimal>("Amount")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("amount");

                    b.Property<byte[]>("From")
                        .IsRequired()
                        .HasColumnName("from")
                        .HasMaxLength(20);

                    b.Property<byte[]>("To")
                        .IsRequired()
                        .HasColumnName("to")
                        .HasMaxLength(20);

                    b.HasKey("TransactionId", "Position")
                        .HasName("pk_transfers");

                    b.HasIndex("From")
                        .HasName("ix_transfers_from");

                    b.HasIndex("To")
                        .HasName("ix_transfers_to");

                    b.ToTable("transfers");
                });

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.Confirmation", b =>
                {
                    b.HasOne("DLTech.ERC20Monitor.DataAccess.Entities.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .HasConstraintName("fk_confirmations_blocks_block_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DLTech.ERC20Monitor.DataAccess.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("fk_confirmations_transactions_transaction_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DLTech.ERC20Monitor.DataAccess.Entities.Transfer", b =>
                {
                    b.HasOne("DLTech.ERC20Monitor.DataAccess.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("fk_transfers_transactions_transaction_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
